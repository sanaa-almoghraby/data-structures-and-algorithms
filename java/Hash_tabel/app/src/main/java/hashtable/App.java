/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package hashtable;

import Tree.BinaryTree;
import Tree.Node;
import Tree.TreeIntersection;

import java.util.HashMap;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());


      HashTable<String, Integer> stringIntegerHashTable = new HashTable<>();
      stringIntegerHashTable.add("John", 300);
      stringIntegerHashTable.add("sanaa", 400);
      stringIntegerHashTable.add("Tom", 200);
      stringIntegerHashTable.add("Jade", 100);
      stringIntegerHashTable.add("Doa", 600);
      stringIntegerHashTable.add("Farah", 700);
      stringIntegerHashTable.add("Jason", 90000);
      stringIntegerHashTable.add("Morgan", 800);
      stringIntegerHashTable.add("Naim", 1000);
      stringIntegerHashTable.add("Qusai", 1500);
      stringIntegerHashTable.add("Deyaa", 10000);

//
//      System.out.println(" index is  " + stringIntegerHashTable.hash("Naim"));
//
//      System.out.println("Integer is  " + stringIntegerHashTable.get("Qusai"));
//
//      System.out.println("Is contain ?  " + stringIntegerHashTable.contains("abrar"));
//
//      System.out.println("Is contain ?  " + stringIntegerHashTable.contains("Jason"));

      System.out.println(HashTable.repeatedWord("It was a queer, sultry summer, the summer they electrocuted the Rosenbergs, and I didnâ€™t know what I was doing in New York"));

///////////////////////////////////////////////////////////////////////////////////////////////

//      BinaryTree<Integer> binaryTreeOne = new BinaryTree<>(new Node<>(5));
//      Node<Integer> node1 = new Node<>(5);
//      Node<Integer> node2 = new Node<>(3);
//      Node<Integer> node3 = new Node<>(2, node1, node2);
//      Node<Integer> node5 = new Node<>(66);
//      Node<Integer> node4 = new Node<>(4, node5, null);
//      binaryTreeOne.root.rightChild = node4;
//      binaryTreeOne.root.leftChild = node3;
//
//      BinaryTree<Integer> binaryTreeTwo = new BinaryTree<>(new Node<>(45));
//      Node<Integer> node6 = new Node<>(5);
//      Node<Integer> node7 = new Node<>(12);
//      Node<Integer> node8 = new Node<>(2, node6, node7);
//      Node<Integer> node9 = new Node<>(44);
//      Node<Integer> node10 = new Node<>(66, node9, null);
//      binaryTreeTwo.root.rightChild = node10;
//      binaryTreeTwo.root.leftChild = node8;
//
//      System.out.println(TreeIntersection.treeIntersection(binaryTreeOne, binaryTreeTwo));

////////////////////////////////////////////////////////////////////////////////////////////////////////
      HashTable hashmapLeftJoin =new HashTable();

      HashMap hashMap=new HashMap();
      hashMap.put("keyOne","sanaa");
      hashMap.put("keyTow","batool");
      hashMap.put("keyThree","omar");
      hashMap.put("keyFour","four");

      HashMap hashMapTow=new HashMap();
      hashMapTow.put("keyOne","kahlil");
      hashMapTow.put("keyTow","saif");
      hashMapTow.put("keyThree","dad");
      hashMapTow.put("Not exist ","");

      System.out.println(hashmapLeftJoin.hashMapLeftJoin(hashMap,hashMapTow));

    }


}
