/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package hashtable;

import Tree.BinaryTree;
import Tree.Node;
import Tree.TreeIntersection;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }

  @Test void HashTableTest() {
    HashTable HashTest= new HashTable();

    HashTest.add("Naim", 1000);
    assertEquals(9, HashTest.hash("John"));

    assertEquals(null, HashTest.get("Qusai"));


    assertEquals(null , HashTest.get("null"));

    assertEquals(true , HashTest.contains("Jason"));
    assertEquals(false , HashTest.contains("abrar"));


  }

  @Test void repeatedWordTest() {
    HashTable repeatWord= new HashTable();

    assertEquals( "was", HashTable.repeatedWord("Once was upon a time,was there was a brave princess who"));
  }

  @Test void treeTest() {
    BinaryTree<Integer> binaryTreeOne = new BinaryTree<>(new Node<>(5));
    Node<Integer> node1 = new Node<>(5);
    Node<Integer> node2 = new Node<>(3);
    Node<Integer> node3 = new Node<>(2, node1, node2);
    Node<Integer> node5 = new Node<>(66);
    Node<Integer> node4 = new Node<>(4, node5, null);
    binaryTreeOne.root.rightChild = node4;
    binaryTreeOne.root.leftChild = node3;

    BinaryTree<Integer> binaryTreeTwo = new BinaryTree<>(new Node<>(45));
    Node<Integer> node6 = new Node<>(5);
    Node<Integer> node7 = new Node<>(12);
    Node<Integer> node8 = new Node<>(2, node6, node7);
    Node<Integer> node9 = new Node<>(44);
    Node<Integer> node10 = new Node<>(66, node9, null);
    binaryTreeTwo.root.rightChild = node10;
    binaryTreeTwo.root.leftChild = node8;
    assertEquals( "[2, 5, 66]", TreeIntersection.treeIntersection(binaryTreeOne, binaryTreeTwo).toString());

  }
}
